package com.rdwhite.spotifystreamer;import android.content.Intent;import android.os.AsyncTask;import android.os.Bundle;import android.support.v4.app.Fragment;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ListView;import android.widget.SearchView;import android.widget.Toast;import com.rdwhite.spotifystreamer.adapters.ArtistSearchAdapter;import com.rdwhite.spotifystreamer.objects.ArtistSearchResult;import java.util.ArrayList;import kaaes.spotify.webapi.android.SpotifyApi;import kaaes.spotify.webapi.android.SpotifyService;import kaaes.spotify.webapi.android.models.Artist;import kaaes.spotify.webapi.android.models.ArtistsPager;/** * A placeholder fragment containing a simple view. */public class ArtistSearchFragment extends Fragment {    private ArtistSearchAdapter artistSearchAdapter;    private ArrayList<ArtistSearchResult> artistSearchResults;    private String artistSearchString;    public ArtistSearchFragment() {    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (savedInstanceState != null) {            artistSearchResults = savedInstanceState.getParcelableArrayList(Constants.ARTIST_SEARCH_RESULTS);            artistSearchString = savedInstanceState.getString(Constants.ARTIST_SEARCH_STRING);        } else {            artistSearchResults = new ArrayList<ArtistSearchResult>();            artistSearchString = "";        }    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        artistSearchAdapter = new ArtistSearchAdapter(getActivity(), artistSearchResults);        View rootView = inflater.inflate(R.layout.fragment_main, container, false);        ListView listView = (ListView) rootView.findViewById(R.id.artist_result_list_view);        listView.setAdapter(artistSearchAdapter);        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                Intent intent = new Intent(getActivity(), TrackSearchActivity.class);                intent.putExtra(Intent.EXTRA_TEXT, artistSearchAdapter.getItem(position).getSpotifyId());                startActivity(intent);            }        });        SearchView artistSearchView = (SearchView) rootView.findViewById(R.id.artist_search_view);        artistSearchView.setQuery(artistSearchString, false);        artistSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {            @Override            public boolean onQueryTextChange(String newText) {                searchArtists(newText);                return true;            }            @Override            public boolean onQueryTextSubmit(String query) {                searchArtists(query);                return true;            }        });        return rootView;    }    private void searchArtists(String queryString) {        FetchArtistResultTask fetchArtistResultTask = new FetchArtistResultTask();        fetchArtistResultTask.execute(queryString);    }    @Override    public void onSaveInstanceState(Bundle outState) {        outState.putParcelableArrayList(Constants.ARTIST_SEARCH_RESULTS,artistSearchResults);        outState.putString(Constants.ARTIST_SEARCH_STRING,artistSearchString);        super.onSaveInstanceState(outState);    }    public class FetchArtistResultTask extends AsyncTask<String, Void, ArtistsPager> {        private final String LOG_TAG = FetchArtistResultTask.class.getSimpleName();        @Override        protected ArtistsPager doInBackground(String... params) {            ArtistsPager results = null;            if (params.length == 0) {                return null;            }            artistSearchString = params[0];            if (!artistSearchString.isEmpty()) {                try {                    SpotifyApi api = new SpotifyApi();                    SpotifyService spotify = api.getService();                    results = spotify.searchArtists(artistSearchString);                } catch (Exception e) {                    Log.e(LOG_TAG, e.getMessage());                }            }            return results;        }        @Override        protected void onPostExecute(ArtistsPager artistsPager) {            artistSearchAdapter.clear();            if (artistsPager != null) {                for (Artist artist : artistsPager.artists.items) {                    String imageUrl = "";                    if (artist.images != null) {                        if(artist.images.size() > 1) {                            // set image to the second to last (medium) image                            imageUrl = artist.images.get(artist.images.size() - 2).url;                        }                        else {                            imageUrl = artist.images.size() == 1 ? artist.images.get(0).url : "";                        }                    }                    artistSearchAdapter.add(new ArtistSearchResult(artist.name, imageUrl, artist.id));                }            }            if (!artistSearchString.isEmpty() && artistSearchAdapter.isEmpty()) {                Toast.makeText(getActivity(), R.string.no_results_artist_toast, Toast.LENGTH_SHORT).show();            }        }    }}